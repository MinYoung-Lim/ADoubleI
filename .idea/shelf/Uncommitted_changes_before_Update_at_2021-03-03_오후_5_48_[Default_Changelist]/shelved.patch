Index: app/src/main/res/layout/mypage_navi.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:background=\"#DFDCDC\"\r\n    android:orientation=\"vertical\"\r\n   >\r\n\r\n    <TextView\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"70dp\"\r\n        android:layout_gravity=\"center\"\r\n        android:layout_marginTop=\"50dp\"\r\n        android:background=\"#DFDCDC\"\r\n        android:fontFamily=\"@font/scdream3\"\r\n        android:text=\"MY PAGE\"\r\n        android:textAlignment=\"center\"\r\n        android:textColor=\"@color/fontColor\"\r\n        android:textSize=\"33sp\"></TextView>\r\n\r\n\r\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/mypage_navi.xml	(revision 679b98602be4db8adfb9cf3838f316358bc077d5)
+++ app/src/main/res/layout/mypage_navi.xml	(date 1614760724059)
@@ -1,22 +1,34 @@
 <?xml version="1.0" encoding="utf-8"?>
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:background="#DFDCDC"
-    android:orientation="vertical"
-   >
+    android:orientation="vertical">
 
-    <TextView
+    <LinearLayout
         android:layout_width="match_parent"
-        android:layout_height="70dp"
-        android:layout_gravity="center"
-        android:layout_marginTop="50dp"
-        android:background="#DFDCDC"
-        android:fontFamily="@font/scdream3"
-        android:text="MY PAGE"
-        android:textAlignment="center"
-        android:textColor="@color/fontColor"
-        android:textSize="33sp"></TextView>
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <TextView
+            android:layout_width="250dp"
+            android:layout_height="70dp"
+
+            android:layout_marginTop="50dp"
+            android:background="#DFDCDC"
+            android:fontFamily="@font/scdream3"
+            android:text="마킹! 키핑!"
+            android:textAlignment="center"
+            android:textColor="@color/fontColor"
+            android:textSize="36sp"></TextView>
+
+        <ImageView
+            android:id="@+id/imageView2"
+            android:layout_width="150dp"
+            android:layout_height="150dp"
+            app:srcCompat="@drawable/logo" />
+    </LinearLayout>
 
 
 </LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/example/adoublei/MainUpload.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.adoublei;\r\n\r\nimport android.Manifest;\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.content.pm.PackageManager;\r\nimport android.database.Cursor;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Matrix;\r\nimport android.hardware.camera2.TotalCaptureResult;\r\nimport android.media.ExifInterface;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.provider.MediaStore;\r\nimport android.util.Base64;\r\nimport android.util.Log;\r\nimport android.view.GestureDetector;\r\nimport android.view.Gravity;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.CompoundButton;\r\nimport android.widget.ImageView;\r\nimport android.text.TextUtils;\r\nimport android.widget.Switch;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.SwitchCompat;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.core.view.MenuItemCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.recyclerview.widget.DividerItemDecoration;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.auth.UserInfo;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.Query;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.google.protobuf.DescriptorProtos;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.nio.ByteBuffer;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\nimport static android.graphics.BitmapFactory.decodeByteArray;\r\nimport static com.example.adoublei.InputEmail.mContext;\r\nimport static java.nio.charset.StandardCharsets.UTF_8;\r\n\r\npublic class MainUpload extends AppCompatActivity {\r\n\r\n    RecyclerView mRecyclerView = null;\r\n    MyAdapter myAdapter=null;\r\n    private ArrayList<ItemObject> mItem =new ArrayList<ItemObject>();\r\n    AESCoderAndriod aesCoderAndriod = new AESCoderAndriod();\r\n\r\n\r\n    private Uri filePath;\r\n    private Button btn_upload;\r\n    private ImageView imageView;\r\n    private Button btn_delete;\r\n    private ImageView mypage;\r\n    private DrawerLayout drawerLayout;\r\n    private boolean isChecked = false;\r\n    private TextView textView;\r\n    private Bitmap ImgBitmap;\r\n    private NavigationView navigation;\r\n\r\n    public Switch sw;\r\n\r\n    public Boolean switchChecked = false;\r\n\r\n    private static final String charsetName = \"UTF-8\";\r\n    private  String useruuid = \"name\";\r\n\r\n\r\n    private byte[] seed = useruuid.getBytes();\r\n    private byte[] Byte_image;\r\n    private byte[] EncryptImg;\r\n\r\n    public String path;\r\n    public String[] delete_path = null;\r\n    ArrayList<Object> delete_path2 = new ArrayList<Object>();\r\n    int num = 0;\r\n\r\n\r\n\r\n\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        checkSelfPermission();\r\n\r\n        btn_upload = findViewById(R.id.button_main_insert);\r\n        imageView = findViewById(R.id.photo_listitem);\r\n        textView = findViewById(R.id.title_listitem);\r\n\r\n        mypage = findViewById(R.id.mypage); //마이페이지 버튼\r\n        drawerLayout = findViewById(R.id.firstlayout); //마이페이지 레이아웃\r\n        navigation = findViewById(R.id.navigation);\r\n\r\n\r\n        //final TextView userName = (TextView) findViewById(R.id.userName);\r\n\r\n        FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();\r\n        String uid = currentUser.getUid();\r\n\r\n        /*SharedPreferences prefs =getSharedPreferences(\"user\", MODE_PRIVATE);\r\n        String result = prefs.getString(\"name\", \"0\"); //키값, 디폴트값\r\n        Log.e(\"name\", result);\r\n        userName.setText(result);*/\r\n\r\n        /*DatabaseReference databaseReference = FirebaseDatabase.getInstance().getReference(\"users/\" + uid + \"/user/userName\");\r\n        databaseReference.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n\r\n                String name = dataSnapshot.getValue(String.class);\r\n                userName.setText(name);\r\n\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });*/\r\n        navigation.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {\r\n            @Override\r\n            public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {\r\n                switch (menuItem.getItemId())\r\n                {\r\n                    case R.id.pwChange:\r\n                        changePwd();\r\n                        break;\r\n                    case R.id.exit:\r\n                        userDelete();\r\n                        break;\r\n                    case R.id.fingerprintTF:\r\n                        //settingSwitch();\r\n\r\n                        break;\r\n\r\n\r\n                }\r\n\r\n                DrawerLayout drawer = findViewById(R.id.firstlayout);\r\n                drawer.closeDrawer(GravityCompat.START);\r\n                return true;\r\n            }\r\n        });\r\n\r\n        /*Switch sw = findViewById(R.id.switch_finger);\r\n        sw.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n            @Override\r\n            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {\r\n                if (isChecked)\r\n                    Toast.makeText(MainUpload.this, \"스위치체크\", Toast.LENGTH_SHORT).show();\r\n                else\r\n                    Toast.makeText(getApplicationContext(), \"스위치체크X\", Toast.LENGTH_LONG).show();\r\n            }\r\n        });\r\n*/\r\n        mRecyclerView = findViewById(R.id.recyclerview_main_list);\r\n        int numberOfColumns = 3;\r\n        GridLayoutManager mGridLayoutManager = new GridLayoutManager(getApplication(), numberOfColumns);\r\n        mRecyclerView.setLayoutManager(mGridLayoutManager);\r\n        mRecyclerView.setHasFixedSize(true);\r\n\r\n        mItem = new ArrayList<>();\r\n        loadPhoto();\r\n\r\n        myAdapter = new MyAdapter(mItem,getApplicationContext());\r\n        mRecyclerView.setAdapter(myAdapter);\r\n\r\n        DividerItemDecoration dividerItemDecoration=new DividerItemDecoration(mRecyclerView.getContext(),mGridLayoutManager.getOrientation());\r\n        mRecyclerView.addItemDecoration(dividerItemDecoration);\r\n\r\n        mRecyclerView.addOnItemTouchListener(new RecyclerTouchListener(getApplicationContext(), mRecyclerView, new ClickListener() {\r\n            @Override\r\n            public void onClick(View view, int position) {\r\n\r\n                ItemObject itemObject = mItem.get(position);\r\n\r\n                Intent intent = new Intent(getApplicationContext(), DetailActivity.class);\r\n                intent.putExtra(\"key\", itemObject.getKey());\r\n                intent.putExtra(\"title\",itemObject.getTitle());\r\n                intent.putExtra(\"photo\",itemObject.getPhoto());\r\n                startActivity(intent);\r\n            }\r\n\r\n            @Override\r\n            public void onLongClick(View view, int position) {\r\n            }\r\n\r\n\r\n        }));\r\n\r\n\r\n        mypage.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                drawerLayout.openDrawer(Gravity.LEFT);\r\n            }\r\n        });\r\n\r\n\r\n\r\n        btn_upload.setOnClickListener(new View.OnClickListener() {\r\n                                          @Override\r\n                                          public void onClick(View view) {\r\n                                              //이미지를 선택\r\n                                              Intent intent = new Intent();\r\n                                              intent.setType(\"image/*\");\r\n                                              intent.setAction(Intent.ACTION_GET_CONTENT);\r\n                                              startActivityForResult(Intent.createChooser(intent, \"이미지를 선택하세요.\"), 0);\r\n\r\n                                          }\r\n                                      }\r\n        );\r\n\r\n\r\n        /*View navHeader = navigation.getHeaderView(0);\r\n        TextView navName = navHeader.findViewById(R.id.userName);\r\n        SharedPreferences prefs =getSharedPreferences(\"user\", MODE_PRIVATE);\r\n        String result = prefs.getString(\"name\", \"0\"); //키값, 디폴트값\r\n        Log.e(\"name\", result);\r\n        navName.setText(result);*/\r\n\r\n    }\r\n\r\n   /* @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        getMenuInflater().inflate(R.menu.navi_menu, menu);\r\n        MenuItem item = (MenuItem) menu.findItem(R.id.fingerprintTF);\r\n        item.setActionView(R.layout.switch_item);\r\n        Switch switchAB = item\r\n                .getActionView().findViewById(R.id.switch_finger);\r\n        switchAB.setChecked(false);\r\n\r\n        switchAB.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\r\n            @Override\r\n            public void onCheckedChanged(CompoundButton buttonView,\r\n                                         boolean isChecked) {\r\n                if (isChecked) {\r\n                    Toast.makeText(getApplicationContext(), \"ON\", Toast.LENGTH_SHORT).show();\r\n                } else {\r\n                    Toast.makeText(getApplicationContext(), \"OFF\", Toast.LENGTH_SHORT).show();\r\n                }\r\n            }\r\n        });\r\n        return true;\r\n    }*/\r\n\r\n   @Override\r\n   public boolean onCreateOptionsMenu(Menu menu) {\r\n       MenuInflater inflater = getMenuInflater();\r\n       inflater.inflate(R.menu.navi_menu, menu);\r\n\r\n       MenuItem item = menu.findItem(R.id.userName);\r\n       SharedPreferences prefs =getSharedPreferences(\"user\", MODE_PRIVATE);\r\n       String result = prefs.getString(\"name\", \"0\"); //키값, 디폴트값\r\n       Log.e(\"name\", result);\r\n       item.setTitle(result);\r\n\r\n\r\n       return super.onCreateOptionsMenu(menu);\r\n   }\r\n\r\n    private void settingSwitch() {\r\n\r\n    }\r\n\r\n    private void changePwd() {\r\n\r\n        Intent intent = new Intent(getApplicationContext(), ChangePwdActivity.class);\r\n        startActivity(intent);\r\n\r\n    }\r\n\r\n    private void userDelete() {\r\n\r\n        AlertDialog.Builder msgBuilder = new AlertDialog.Builder(MainUpload.this)\r\n                .setTitle(\"회원 탈퇴\")\r\n                .setMessage(\"정말로 회원을 탈퇴하시겠습니까?\")\r\n                .setPositiveButton(\"예\", new DialogInterface.OnClickListener() {\r\n                    @Override public void onClick(DialogInterface dialogInterface, int i) {\r\n                        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n\r\n                        user.delete()\r\n                                .addOnCompleteListener(new OnCompleteListener<Void>() {\r\n                                    @Override\r\n                                    public void onComplete(@NonNull Task<Void> task) {\r\n                                        if (task.isSuccessful()) {\r\n                                            Toast.makeText(getApplicationContext(), \"회원 탈퇴에 성공하였습니다\", Toast.LENGTH_LONG).show();\r\n                                            Log.e(\"회원탈퇴\", \"성공\");\r\n                                            finishAffinity();\r\n                                            Intent intent = new Intent(getApplicationContext(), LoginActivity.class);\r\n                                            startActivity(intent);\r\n                                            System.exit(0);\r\n\r\n                                        }\r\n                                        else{\r\n                                            Log.e(\"회원탈퇴\", \"실패\");\r\n                                            Toast.makeText(getApplicationContext(), \"회원 탈퇴에 실패하였습니다\", Toast.LENGTH_LONG).show();\r\n                                        }\r\n                                    }\r\n                                });\r\n\r\n                    } })\r\n                .setNegativeButton(\"아니요\", new DialogInterface.OnClickListener() {\r\n                    @Override public void onClick(DialogInterface dialogInterface, int i) {\r\n                    }\r\n                });\r\n\r\n        AlertDialog msgDlg = msgBuilder.create();\r\n        msgDlg.show();\r\n\r\n\r\n    }\r\n\r\n\r\n    public interface ClickListener {\r\n        void onClick(View view, int position);\r\n\r\n        void onLongClick(View view, int position);\r\n    }\r\n\r\n\r\n\r\n    public static class RecyclerTouchListener implements RecyclerView.OnItemTouchListener {\r\n\r\n        private GestureDetector gestureDetector;\r\n        private MainUpload.ClickListener clickListener;\r\n\r\n        public RecyclerTouchListener(Context context, final RecyclerView recyclerView, final MainUpload.ClickListener clickListener) {\r\n            this.clickListener = clickListener;\r\n            gestureDetector = new GestureDetector(context, new GestureDetector.SimpleOnGestureListener() {\r\n                @Override\r\n                public boolean onSingleTapUp(MotionEvent e) {\r\n                    return true;\r\n                }\r\n\r\n                @Override\r\n                public void onLongPress(MotionEvent e) {\r\n                    View child = recyclerView.findChildViewUnder(e.getX(), e.getY());\r\n                    if (child != null && clickListener != null) {\r\n                        clickListener.onLongClick(child, recyclerView.getChildAdapterPosition(child));\r\n                    }\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n        @Override\r\n        public boolean onInterceptTouchEvent(RecyclerView rv, MotionEvent e) {\r\n            View child = rv.findChildViewUnder(e.getX(), e.getY());\r\n            if (child != null && clickListener != null && gestureDetector.onTouchEvent(e)) {\r\n                clickListener.onClick(child, rv.getChildAdapterPosition(child));\r\n            }\r\n            return false;\r\n        }\r\n\r\n        @Override\r\n        public void onTouchEvent(RecyclerView rv, MotionEvent e) {\r\n        }\r\n\r\n        @Override\r\n        public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept) {\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    //결과 처리\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n\r\n        //request코드가 0이고 OK를 선택했고 data에 뭔가가 들어 있다면\r\n        if (requestCode == 0 && resultCode == RESULT_OK) {\r\n\r\n            filePath = data.getData();\r\n\r\n            //ImgBitmap = MediaStore.Images.Media.getBitmap(getContentResolver(), filePath);\r\n\r\n            ImgBitmap = resize(getApplicationContext(), filePath, 1000);\r\n\r\n\r\n            Byte_image = BitmapToByteArray(ImgBitmap);\r\n\r\n\r\n            try {\r\n                // Uri파일로 bitmap resize\r\n                //resize(getApplicationContext(), filePath, 1000);\r\n\r\n                // 이미지 암호화\r\n                EncryptImg = aesCoderAndriod.encrypt(seed, Byte_image);\r\n\r\n                String EncrypString = Base64.encodeToString(EncryptImg,0);\r\n\r\n                // Log.e(\"Encrypt\", EncrypString);\r\n                FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();\r\n                DatabaseReference databaseReference = FirebaseDatabase.getInstance().getReference(\"users\")\r\n                        .child(currentUser.getUid()).child(\"Object\");\r\n                String key = databaseReference.push().getKey();\r\n                HashMap<Object,String> object = new HashMap<Object, String>();\r\n\r\n                object.put(\"key\", key);\r\n                object.put(\"title\",\"IMG_\" + System.currentTimeMillis()/10000000);\r\n                object.put(\"photo\",EncrypString);\r\n\r\n                Log.e(\"올릴때의 key\", key);\r\n\r\n                DatabaseReference keyRef = databaseReference.child(key);\r\n                keyRef.setValue(object);\r\n\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public Bitmap rotate(Bitmap bitmap, int degrees)\r\n    {\r\n        if(degrees != 0 && bitmap != null)\r\n        {\r\n            Matrix m = new Matrix();\r\n            m.setRotate(degrees, (float) bitmap.getWidth() / 2,\r\n                    (float) bitmap.getHeight() / 2);\r\n\r\n            try\r\n            {\r\n                Bitmap converted = Bitmap.createBitmap(bitmap, 0, 0,\r\n                        bitmap.getWidth(), bitmap.getHeight(), m, true);\r\n                if(bitmap != converted)\r\n                {\r\n                    bitmap.recycle();\r\n                    bitmap = converted;\r\n                }\r\n            }\r\n            catch(OutOfMemoryError ex)\r\n            {\r\n                // 메모리가 부족하여 회전을 시키지 못할 경우 그냥 원본을 반환합니다.\r\n            }\r\n        }\r\n        return bitmap;\r\n    }\r\n\r\n    public int exifOrientationToDegrees(int exifOrientation)\r\n    {\r\n        if(exifOrientation == ExifInterface.ORIENTATION_ROTATE_90)\r\n        {\r\n            return 90;\r\n        }\r\n        else if(exifOrientation == ExifInterface.ORIENTATION_ROTATE_180)\r\n        {\r\n            return 180;\r\n        }\r\n        else if(exifOrientation == ExifInterface.ORIENTATION_ROTATE_270)\r\n        {\r\n            return 270;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public void fileDelete(){\r\n        for(int i=0;i<delete_path2.size();i++){\r\n            //fileDelete((String) delete_path2.get(i));\r\n            Log.e(\"hello\", (String) delete_path2.get(i));\r\n            File file = new File((String) delete_path2.get(i));\r\n            if(file.exists()){\r\n                if(file.delete()){\r\n                    Log.e(\"file delete\", \"성공\");\r\n                }\r\n                Log.e(\"file delete\", \"실패\");\r\n            }\r\n        }\r\n    }\r\n    public void loadPhoto() {\r\n        FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();\r\n        DatabaseReference databaseReference = FirebaseDatabase.getInstance().getReference(\"users\")\r\n                .child(currentUser.getUid()).child(\"Object\");\r\n        databaseReference.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {\r\n                mItem.clear();\r\n                num = 0;\r\n                for (DataSnapshot snapshot : dataSnapshot.getChildren()) {\r\n\r\n                    ItemObject itemObject = snapshot.getValue(ItemObject.class);\r\n                    String key = itemObject.getKey();\r\n                    String title = itemObject.getTitle();\r\n                    String En1 = itemObject.getPhoto();\r\n\r\n                    Log.e(\"받았을때의 key\", key);\r\n\r\n\r\n                    byte[] Dn1 = (Base64.decode(En1, 0));\r\n                    byte[] Dn2 = new byte[0];\r\n                    try {\r\n                        Dn2 = aesCoderAndriod.decrypt(seed, Dn1);\r\n                        //Log.e(\"Dn2\", String.valueOf(Dn2));\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    Bitmap Dn3 = byteArrayToBitmap(Dn2);\r\n                    Uri Dn4 = getImageUri(getApplicationContext(), Dn3);\r\n                    //  Log.e(\"Dn3\", String.valueOf(Dn3));\r\n                    ItemObject itemObject1 = new ItemObject(key, title, Dn4.toString());\r\n                    mItem.add(itemObject1);\r\n\r\n                    //File delete_file = new File(please);\r\n                    //boolean delete = delete_file.delete();\r\n                    //fileDelete(\"\");\r\n                    //fileDelete(delete_path);\r\n\r\n//                    String delete_path = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES)+\"/\";\r\n//\r\n//                    File delete_file;\r\n//                    if(num==0){\r\n//                        delete_path += \"Title.jpg\";\r\n//                        delete_file = new File(delete_path);\r\n//                        //delete_path = \"/storage/emulated/Pictures/Title.jpg\";\r\n//                    }\r\n//                    else{\r\n//                        delete_path += \"Title (\"+num+\").jpg\";\r\n//                        delete_file = new File(delete_path);\r\n//\r\n//                    }\r\n//                    Log.e(\"delete_path\",delete_path);\r\n//\r\n//                    delete_file.delete();\r\n                    num++;\r\n\r\n\r\n                }\r\n                myAdapter.notifyDataSetChanged();\r\n                num = 0;\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n\r\n\r\n\r\n\r\n//        File file = new File(getPath(Uri.parse(path)));\r\n//        if(file.exists()){\r\n//            if(file.delete()){\r\n//                Log.e(\"file delete\", \"성공\");\r\n//            }\r\n//            Log.e(\"file delete\", \"실패\");\r\n//        }\r\n\r\n\r\n   /*     databaseReference.removeEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                snapshot.getRef().removeValue();\r\n                ItemObject itemObject = snapshot.getValue(ItemObject.class);\r\n                String title = itemObject.getTitle();\r\n                String photo = itemObject.getPhoto();\r\n                itemObject = new ItemObject(title, photo);\r\n                mItem.remove(itemObject);\r\n                myAdapter.notifyDataSetChanged();\r\n\r\n            }\r\n\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n\r\n    */\r\n\r\n    }\r\n\r\n    public static boolean fileDelete(String filePath){\r\n        try{\r\n            File file = new File(filePath);\r\n\r\n            if(file.exists()){\r\n\r\n                file.delete();\r\n                return true;\r\n            }\r\n\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n        return false;\r\n    }\r\n    public String getPath(Uri uri) {\r\n        String[] projection = {MediaStore.Images.Media.DATA};\r\n        Cursor cursor = managedQuery(uri, projection, null, null, null);\r\n        startManagingCursor(cursor);\r\n        int columnIndex = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);\r\n        cursor.moveToFirst();\r\n        return cursor.getString(columnIndex);\r\n    }\r\n\r\n    private Uri getImageUri(Context context, Bitmap inImage) { //bitmap -> Uri\r\n        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\r\n        inImage.compress(Bitmap.CompressFormat.JPEG, 100,bytes);\r\n        path = MediaStore.Images.Media.insertImage(context.getContentResolver(), inImage, \"Title\", null);\r\n\r\n        delete_path2.add(getPath(Uri.parse(path)));\r\n\r\n        return Uri.parse(path);\r\n    }\r\n\r\n    public static Bitmap StringToBitmap(String encodedString) {\r\n        try {\r\n            byte[] encodeByte = Base64.decode(encodedString, Base64.DEFAULT);\r\n            Bitmap bitmap = decodeByteArray(encodeByte, 0, encodeByte.length);\r\n            return bitmap;\r\n        } catch (Exception e) {\r\n            e.getMessage();\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    //Bitmap을 String형으로 변환\r\n    public static String BitmapToString(Bitmap bitmap) {\r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n        bitmap.compress(Bitmap.CompressFormat.PNG, 15, baos);\r\n        byte[] bytes = baos.toByteArray();\r\n        String temp = Base64.encodeToString(bytes, Base64.DEFAULT);\r\n        return temp;\r\n    }\r\n\r\n\r\n    //Bitmap을 byte배열로 변환\r\n    public static byte[] BitmapToByteArray(Bitmap bitmap) {\r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n        bitmap.compress(Bitmap.CompressFormat.JPEG, 70, baos);\r\n        return baos.toByteArray();\r\n\r\n    }\r\n\r\n    //byte를 Bitmap으로 변환\r\n    public static Bitmap byteArrayToBitmap1(byte[] byteArray ) {\r\n        //바이트 배열\r\n        Bitmap bitmap;\r\n        BitmapFactory.Options options = new BitmapFactory.Options();\r\n        int width = options.outWidth;  //이미지의 너비\r\n        int height = options.outHeight; //이미지의 높이\r\n        bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888); //비트맵을 생성\r\n        ByteBuffer buffer = ByteBuffer.wrap(byteArray);\r\n        buffer.rewind();\r\n        bitmap.copyPixelsFromBuffer(buffer);\r\n\r\n        return bitmap;\r\n    }\r\n    public static Bitmap byteArrayToBitmap(byte[] byteArray){\r\n\r\n        Bitmap bitmap = decodeByteArray(byteArray,0,byteArray.length);\r\n        return bitmap;\r\n    }\r\n\r\n    public static Bitmap resize(Context context, Uri uri, int resize) {\r\n        Bitmap resizeBitmap = null;\r\n\r\n        BitmapFactory.Options options = new BitmapFactory.Options();\r\n\r\n        try {\r\n            BitmapFactory.decodeStream(context.getContentResolver().openInputStream(uri), null, options); // 1번\r\n\r\n            int width = options.outWidth;\r\n            int height = options.outHeight;\r\n            int samplesize = 1;\r\n\r\n            while (true) {//2번\r\n                if (width / 2 < resize || height / 2 < resize)\r\n                    break;\r\n                width /= 2;\r\n                height /= 2;\r\n                samplesize *= 2;\r\n            }\r\n\r\n            options.inSampleSize = samplesize;\r\n            Bitmap bitmap = BitmapFactory.decodeStream(context.getContentResolver().openInputStream(uri), null, options); //3번\r\n            resizeBitmap = bitmap;\r\n\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return resizeBitmap;\r\n\r\n    }\r\n\r\n    /*public boolean onPrepareOptionMenu(Menu menu){\r\n        MenuItem checkable = menu.findItem(R.id.fingerprintTF);\r\n        checkable.setChecked(isChecked);\r\n        return true;\r\n    }\r\n\r\n    public boolean onOptionsItemSelected(MenuItem item){\r\n        switch (item.getItemId()){\r\n            case R.id.fingerprintTF:\r\n                isChecked = !item.isChecked();\r\n                item.setChecked(isChecked);\r\n                Toast.makeText(getApplicationContext(), \"스위치클릭\", Toast.LENGTH_SHORT).show();\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }*/\r\n\r\n\r\n    private void clearAll(){\r\n        if(mItem !=null){\r\n            mItem.clear();\r\n            if(myAdapter != null){\r\n                myAdapter.notifyDataSetChanged();\r\n\r\n            }\r\n        }\r\n        mItem = new ArrayList<>();\r\n    }\r\n\r\n    public void checkSelfPermission() {\r\n        String temp = \"\";\r\n        //파일 읽기 권한 확인\r\n        if (ContextCompat.checkSelfPermission(\r\n                this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            temp += Manifest.permission.READ_EXTERNAL_STORAGE + \" \";\r\n        }\r\n\r\n        //파일 쓰기 권한 확인\r\n        if (ContextCompat.checkSelfPermission(\r\n                this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            temp += Manifest.permission.WRITE_EXTERNAL_STORAGE + \" \";\r\n        }\r\n        if (TextUtils.isEmpty(temp) == false) {\r\n            // 권한 요청\r\n            ActivityCompat.requestPermissions(this, temp.trim().split(\" \"),1);\r\n        }\r\n        else {\r\n            // 모두 허용 상태\r\n            //Toast.makeText(this, \"권한을 모두 허용\", Toast.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n\r\n        if (requestCode==1){\r\n            int length = permissions.length;\r\n            for (int i=0;i<length;i++){\r\n                if (grantResults[i]==PackageManager.PERMISSION_GRANTED)\r\n                    Log.e(\"MainUpload\", \"권한허용\"+permissions[i]);\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/adoublei/MainUpload.java	(revision 679b98602be4db8adfb9cf3838f316358bc077d5)
+++ app/src/main/java/com/example/adoublei/MainUpload.java	(date 1614761087968)
@@ -164,10 +164,10 @@
                     case R.id.exit:
                         userDelete();
                         break;
-                    case R.id.fingerprintTF:
+                 //   case R.id.fingerprintTF:
                         //settingSwitch();
 
-                        break;
+                        //break;
 
 
                 }
@@ -285,11 +285,11 @@
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.navi_menu, menu);
 
-       MenuItem item = menu.findItem(R.id.userName);
+      // MenuItem item = menu.findItem(R.id.userName);
        SharedPreferences prefs =getSharedPreferences("user", MODE_PRIVATE);
        String result = prefs.getString("name", "0"); //키값, 디폴트값
        Log.e("name", result);
-       item.setTitle(result);
+   //    item.setTitle(result);
 
 
        return super.onCreateOptionsMenu(menu);
Index: app/src/main/res/layout/navi_header.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:background=\"#DFDCDC\"\r\n    android:orientation=\"vertical\"\r\n    >\r\n\r\n    <TextView\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"70dp\"\r\n        android:layout_gravity=\"center\"\r\n        android:layout_marginTop=\"50dp\"\r\n        android:background=\"#DFDCDC\"\r\n        android:fontFamily=\"@font/scdream3\"\r\n        android:text=\"MY PAGE\"\r\n        android:textAlignment=\"center\"\r\n        android:textColor=\"@color/fontColor\"\r\n        android:textSize=\"33sp\"></TextView>\r\n\r\n\r\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/navi_header.xml	(revision 679b98602be4db8adfb9cf3838f316358bc077d5)
+++ app/src/main/res/layout/navi_header.xml	(date 1614760724071)
@@ -2,21 +2,32 @@
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
     android:background="#DFDCDC"
-    android:orientation="vertical"
-    >
+    android:orientation="vertical">
 
-    <TextView
+    <LinearLayout
         android:layout_width="match_parent"
-        android:layout_height="70dp"
-        android:layout_gravity="center"
-        android:layout_marginTop="50dp"
-        android:background="#DFDCDC"
-        android:fontFamily="@font/scdream3"
-        android:text="MY PAGE"
-        android:textAlignment="center"
-        android:textColor="@color/fontColor"
-        android:textSize="33sp"></TextView>
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <TextView
+            android:layout_width="250dp"
+            android:layout_height="70dp"
+
+            android:layout_marginTop="50dp"
+            android:background="#DFDCDC"
+            android:fontFamily="@font/scdream3"
+            android:text="마킹! 키핑!"
+            android:textAlignment="center"
+            android:textColor="@color/fontColor"
+            android:textSize="36sp"></TextView>
 
+        <ImageView
+            android:id="@+id/imageView2"
+            android:layout_width="150dp"
+            android:layout_height="150dp"
+            app:srcCompat="@drawable/logo" />
+    </LinearLayout>
 
 </LinearLayout>
\ No newline at end of file
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    package=\"com.example.adoublei\">\r\n\r\n    <!--<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />-->\r\n    <uses-permission android:name=\"android.permission.CAMERA\" />\r\n    <!--<uses-permission android:name=\"android.permission.INTERNET\" />-->\r\n    <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\r\n    <uses-permission android:name=\"android.permission.INTERNET\" android:required=\"true\"/>\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" android:required=\"true\"/>\r\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" android:required=\"true\"/>\r\n    <uses-permission android:name=\"android.permission.WRITE_INTERNAL_STORAGE\" android:required=\"true\"/>\r\n    <uses-permission android:name=\"android.permission.READ_INTERNAL_STORAGE\" android:required=\"true\"/>\r\n\r\n    <uses-feature\r\n        android:name=\"android.hardware.camera\"\r\n        android:required=\"false\" />\r\n    <uses-feature\r\n        android:name=\"android.hardware.camera.autofocus\"\r\n        android:required=\"false\" />\r\n    <uses-feature\r\n        android:name=\"android.hardware.camera.front\"\r\n        android:required=\"false\" />\r\n    <uses-feature\r\n        android:name=\"android.hardware.camera.front.autofocus\"\r\n        android:required=\"false\" />\r\n\r\n    <supports-screens\r\n        android:anyDensity=\"true\"\r\n        android:largeScreens=\"true\"\r\n        android:normalScreens=\"true\"\r\n        android:resizeable=\"true\"\r\n        android:smallScreens=\"true\" />\r\n\r\n    <!--<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />-->\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme\"\r\n        android:usesCleartextTraffic=\"true\"\r\n        android:requestLegacyExternalStorage=\"true\">\r\n\r\n        <activity android:name=\".masking.MaskingAutoActivity\">\r\n        </activity>\r\n        <activity android:name=\".masking.MaskingActivity\" />\r\n        <activity android:name=\".LoginPwdActivity\" />\r\n        <activity android:name=\".ChangePwdActivity\" />\r\n        <activity android:name=\".LoginFingerprintActivity\" />\r\n        <activity android:name=\".RegisterFingerActivity\" />\r\n        <activity android:name=\".ReInputPwdRealActivity\" />\r\n        <activity android:name=\".InputPwdRealActivity\" />\r\n        <activity android:name=\".InputNameRealActivity\" />\r\n        <activity android:name=\".InputEmailRealActivity\" />\r\n        <!--\r\n            <activity android:name=\".CanvasTestActivity\" />\r\n            <activity android:name=\".TextRecognitionActivity2\" />\r\n            <activity android:name=\".TextRecognitionActivity\" />\r\n            <activity android:name=\".LoginTestActivity\" />\r\n            <activity android:name=\".CropActivity\" />\r\n            <activity android:name=\".ScanActivity9\" />\r\n            <activity android:name=\".ScanActivity8\" />\r\n        -->\r\n        <!-- optional (needed if default theme has no action bar) -->\r\n        <activity android:name=\".LoginActivity\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity android:name=\".InputEmail\" />\r\n        <activity android:name=\".MainActivity\" />\r\n        <activity android:name=\".detailActivity2\" />\r\n        <activity android:name=\".InputName\" />\r\n        <activity android:name=\".InputPassword\" />\r\n        <activity android:name=\".ReinputPassword\" />\r\n        <activity android:name=\".InputFingerprint\" />\r\n        <activity android:name=\".MainUpload\" />\r\n        <activity android:name=\".DetailActivity\" />\r\n\r\n        <meta-data\r\n            android:name=\"com.google.android.actions\"\r\n            android:resource=\"@xml/filepaths\" />\r\n\r\n        <provider\r\n            android:name=\"androidx.core.content.FileProvider\"\r\n            android:authorities=\"com.example.adoublei\"\r\n            android:exported=\"false\"\r\n            android:grantUriPermissions=\"true\">\r\n            <meta-data\r\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\r\n                android:resource=\"@xml/filepaths\" />\r\n        </provider>\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision 679b98602be4db8adfb9cf3838f316358bc077d5)
+++ app/src/main/AndroidManifest.xml	(date 1614760870204)
@@ -37,9 +37,9 @@
 
     <application
         android:allowBackup="true"
-        android:icon="@mipmap/ic_launcher"
-        android:label="@string/app_name"
-        android:roundIcon="@mipmap/ic_launcher_round"
+        android:icon="@drawable/logo"
+        android:label="마킹!키핑!"
+        android:roundIcon="@drawable/logo"
         android:supportsRtl="true"
         android:theme="@style/AppTheme"
         android:usesCleartextTraffic="true"
